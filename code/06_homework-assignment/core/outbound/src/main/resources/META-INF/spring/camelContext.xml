<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:camel="http://camel.apache.org/schema/spring"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:osgi="http://www.springframework.org/schema/osgi"
  xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
  http://www.springframework.org/schema/osgi-compendium http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd">

  <!-- The way properties are used changes WILDLY between deployment platforms.
       Everything is handled automatically for you here
       but pay attention to running on Fabric vs OpenShift vs Standalone.
       The way properties are used here is NOT best practices for any of them
       and is instead a mix because it is intended to demo on all of them. -->

  <!-- set property values here so we don't have to recompile to change them -->
  <osgix:cm-properties id="outboundProps" persistent-id="com.customer.outbound">
    <prop key="nextgate.url">cxf://http://localhost:8181/cxf/PersonEJBService/PersonEJB?serviceClass=com.sun.mdm.index.webservice.PersonEJB&amp;dataFormat=MESSAGE</prop>
  </osgix:cm-properties>

  <!-- This reference just lets all of our routes use the same
  connection pool set up in the mq-service project-->
  <osgi:reference id="activemqService" interface="org.apache.camel.Component" />

  <camelContext xmlns="http://camel.apache.org/schema/spring" id="outboundSOAP" trace="false">
    <propertyPlaceholder id="myPropertyPlaceholder" location="ref:outboundProps"/>

    <!-- stream caching has to be enabled to process the message and log it from cxf -->
    <route id="sendToNextGate" streamCache="true">
      <!-- the queue that we receive from is normally set as a property -->
      <from uri="activemqService:queue:nextgate" />
        <log loggingLevel="INFO" message="Message from outbound queue: ${body}" />
        <setHeader headerName="operationName">
          <constant>executeMatchUpdate</constant>
        </setHeader>
      <to uri="{{nextgate.url}}" pattern="InOut"/>
        <log message="Response from CXF : ${body}" />
        <!-- here we will look at the result code and set the body based on it -->
        <choice>
          <when>
            <xpath>//resultCode = '0'</xpath>
            <transform>
              <simple>0</simple>
            </transform>
          </when>
          <when>
            <xpath>//resultCode = '1'</xpath>
            <transform>
              <simple>1</simple>
            </transform>
          </when>
          <otherwise>
            <transform>
              <simple>-1</simple>
            </transform>
          </otherwise>
        </choice>
    </route>

  </camelContext>

</beans>
